
Problem Description 

Given an array 'A' of sorted integers and another non-negative integer B, find if there exist 2 indices i and j such that A[i] - A[j] = k, i != j.
Return 0 / 1 ( 0 for false, 1 for true ) for this problem
Try doing this in less than linear space complexity.


Problem Constraints
1 <= |A| <= 106
0 <= B <= 109


Input Format
The first argument is an integer array A.
The second argument is an integer B.


Output Format
Return an integer, 0 / 1 ( 0 for false, 1 for true ) for this problem


Example Input
 A : [1 3 5] 
 B : 4


Example Output
1


Example Explanation
For the given, 
 A : [1 3 5] 
 B : 4
Output : YES
as 5 - 1 = 4



PROGRAM:
SIMPLE CASE APPROACH:
class Solution:
	# @param A : list of integers
	# @param B : integer
	# @return an integer
	def diffPossible(self, A, B):
        for i in range(0,len(A)):
            if A[i]-B in A and A.index(A[i]-B)!=i:
                return 1    
        return 0
        
HARD CASE APPROACH:
class Solution:
	# @param A : list of integers
	# @param B : integer
	# @return an integer
	def diffPossible(self, array, B):
        
        for i in range(0,len(array)):
            low = 0
            high = len(array)-1
            while low <= high:
                mid = low + (high - low) // 2
                if array[mid] == array[i]-B and mid!=i:
                    # print(array[mid],array[i]-B,i,array.index(array[i]-B))
                    count = 1;
                    return 1;
                    exit()
                elif array[mid] < array[i]-B:
                    low = mid + 1
                    # print("low = mid+1")
                else:
                    high = mid - 1
                    # print("high = mid-1")

        return 0;
