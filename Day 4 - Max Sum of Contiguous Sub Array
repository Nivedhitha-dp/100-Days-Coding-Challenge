Problem Description

Find the contiguous subarray within an array, A of length N which has the largest sum.

Problem Constraints
1 <= N <= 106
-1000 <= A[i] <= 1000


Input Format
The first and the only argument contains an integer array, A.


Output Format
Return an integer representing the maximum possible sum of the contiguous subarray.


Example Input
Input 1:
A = [1, 2, 3, 4, -10]
Input 2:
A = [-2, 1, -3, 4, -1, 2, 1, -5, 4]


Example Output
Output 1:
10
Output 2:
6


Example Explanation
Explanation 1:
The subarray [1, 2, 3, 4] has the maximum possible sum of 10.
Explanation 2:
The subarray [4,-1,2,1] has the maximum possible sum of 6.

PROGRAM:

APPROACH 1 - SIMPLE

class Solution:
    # @param A : tuple of integers
    # @return an integer

    def maxSubArray(self, l):
        # A = l[0]+l[1]
        A=[]
        if len(l)==1:
            return l[0]
            exit()
        for i in range(0,len(l)):
            for j in range(i+1,len(l)):
                l1 = l[i:j+1]
                A.append(sum(l1))
                # if sum(l)>A:
                    # A = sum(l)
        return max(A)
APPROACH 2 - OPTIMAL

def maximumSubarraySum(arr):
       n = len(arr)
       maxSum = -1e8
       currSum = 0

       for i in range(0, n):
           currSum = currSum + arr[i]
           if(currSum > maxSum):
               maxSum = currSum
           if(currSum < 0):
               currSum = 0
      
       return maxSum

if _name_ == "_main_":
    # Your code goes here
    print(maximumSubarraySum([1, 3, 8, -2, 6, -8, 5]));

APPROACH 3 - OPTIMAL 

inf = float('inf')

class Solution:
	# @param A : tuple of integers
	# @return an integer
	def maxSubArray(self, A):
	    best = -inf
	    sumsofar = 0
	    for x in A:
	        sumsofar += x
	        best = max(sumsofar, best)
	        # Doing this last, to handle case
	        # when all numbers are negative.
	        sumsofar = max(sumsofar, 0)
	    return best
